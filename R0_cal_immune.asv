function R0 = R0_cal_immune()
global P

% Stability of DFE when q = 0
if P.balance_fertility == 1
    alphamax = P.age_max; %% Inf
    muH_int = P.muH_int_fun;
    [~,~,~,~,~,~,CH] = steady_state('DFE'); % steady state for CH - total immunity (function handle)
    sigmoid_rho = sigmoid_prob_fun('rho'); % return a function handle
    sigmoid_phi = sigmoid_prob_fun('phi'); % return a function handle
    rho = @(a) sigmoid_rho(CH(a)); 
    phi = @(a) sigmoid_phi(CH(a)); 
%% For D part ----- double integral (alpha, a)    
    %'ArrayValued' only supported by intergral, not integral2
%     D_alpha_a = @(alpha) integral(@(a) exp(-muH_int(alpha)).*exp(-P.rD.*(alpha-a)).*rho(a).*(1-exp(-P.h.*a)), 0, alpha);
%     D_int = integral(D_alpha_a,0,P.age_max,'ArrayValued',true);
    fun = @(alpha,a) exp(-muH_int(alpha)).*exp(-P.rD.*(alpha-a)).*rho(a).*(1-exp(-P.h.*a));
    amax = @(alpha) alpha;
    D_int = integral2(fun,0,P.age_max,0,amax);
    keyboard
%%  For A part --- triple integral (alpha, a, x)...
    %% method 1  double + triple integral on (alpha, a, x)
    fun = @(a) (1-rho(a)).*(1-exp(-P.h.*a))+P.rD.*(1-phi(a)).*D_alpha_a(a);
    fun_int = integral2(@(a) exp(-muH_int(alpha)).*exp(-P.rA.*(alpha-a)).*fun(a),0,pha);
%     A_int = integral(@(alpha)  exp(-muH_int(alpha)).*exp(-P.rA.*alpha)*fun_int(alpha),0,P.age_max,'ArrayValued',true);

%% calculate R0
%     C_star = (bM*P.betaM*P.sigma./(P.sigma+P.muM)./P.muM)*(bH*P.Lambda);
%     zeta_P = @(p) C_star*da*trapz(exp(-P.muH_int).*(P.betaD.*F_P(p,0:da:age_max)' + P.betaA.*H_P(p,0:da:age_max)'));
    [bH,bM] = biting_rate(1,P.gM/P.muM);  % assume NH=1; NH(end) for numerical simulation is > 1
    RHM = bH*P.Lambda*(P.betaD*D_int+P.betaA*A_int);
    RMH = bM*P.betaM*P.sigma/(P.sigma+P.muM)./P.muM;
    R0 = RHM*RMH;
end
end