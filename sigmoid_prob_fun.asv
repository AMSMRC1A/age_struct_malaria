%% sigmoidal function for converting immunity to probabilties
% return function handle
function fun = sigmoid_prob_fun(lprob)
global P

phi = @(f_0, f_1, x, t_2, s_2, L) f_0 + (f_1-f_0)./(1 + exp(-(x/L-t_2)/s_2));
L = 100; % stretches the effective domain to [0,L]
f_0 = 0.1; % value at zero
f_1 = 0.9; % value at L (function saturates to this value)
t_2 = 0.5; % threshold value (as a fraction of L)
s_2 = 0.1; % sigmoid steepness

switch lprob
    case 'phi'
        %cmin = 0; cmax = 1; k = 2; c = 40; % c = 40 (if in years, i.e. da = 365, Filipe)
        L = 100; % stretches the effective domain to [0,L]
        f_0 = 0.1; % value at zero
        f_1 = 0.9; % value at L (function saturates to this value)
        t_2 = 0.5; % threshold value (as a fraction of L)
        s_2 = 0.1; % sigmoid steepness, smaller is steeper
        fun = @(x) phi(f_0, f_1, x, t_2, s_2, P.L);
        %P.phi0*ones(size(x));
    case 'rho'
        %cmin = 0; cmax = 1; k = 2; c = 40;
        L = 100; % stretches the effective domain to [0,L]
        f_0 = 0.1; % value at zero
        f_1 = 0.9; % value at L (function saturates to this value)
        t_2 = 0.5; % threshold value (as a fraction of L)
        s_2 = 0.1; % sigmoid steepness
        fun = @(x) phi(f_0, f_1, x, t_2, s_2, L);
        %P.rho0*ones(size(x));
    case 'psi'
        %cmin = 0; cmax = 1; k = 2; c = 40;
        L = 100; % stretches the effective domain to [0,L]
        f_0 = 0.1; % value at zero
        f_1 = 0.9; % value at L (function saturates to this value)
        t_2 = 0.5; % threshold value (as a fraction of L)
        s_2 = 0.1; % sigmoid steepness
        fun = @(x) phi(f_0, f_1, x, t_2, s_2, L);
        %P.psi0*ones(size(x));
    otherwise
        error('not defined probability parameter')
end
end

% input x should be the immunity level (C_s)
% minimum value: cmin
% maximum value: cmax
% constant at half maximal: c
% Hill coefficient (steepness): k